<?php

define('THUMB_WIDTH', 268);

// Fix portfolio pagination 404 error
add_action( 'pre_get_posts', 'iwak_pre_get_posts' );
function iwak_pre_get_posts() {
    global $wp_query;
    if ( $posts_per_page = $iwak->o['portfolio']['posts_per_page'] && get_option($wp_query->get_queried_object()->term_id. '-cat_posts') ) {
        $wp_query->set( 'posts_per_page', $posts_per_page );
    }
}

if(!class_exists('iWaK')) {

    class iWaK extends iWaK_Template {
                                        
        function __construct() {
        
            parent::__construct();
            
            add_action('init', array(&$this, 'init'));
            add_action('wp_head', array(&$this, 'wp_head'));
            add_action('widgets_init', array(&$this, 'widgets_init'));
            
            //add_filter('wp_trim_excerpt', array(&$this, 'remove_excerpt_more'));
            add_filter('sidebars_widgets', array($this, 'reset_widget_number'));
            add_filter('dynamic_sidebar_params', array($this, 'widget_number'));
            add_filter('post_gallery',array(&$this, 'gallery_shortcode'), 10, 2 );
            //add_filter('rewrite_rules_array', array(&$this, 'add_verbose_portfolio_clients_page'));
            
            //if(!is_admin())
                //add_action('pre_get_posts', array(&$this, 'exclude_sticky_posts'));
                
            // Since WP 3.0
            if ( WPVERSION >= 30 ) {
                add_action('init', array(&$this, 'product_register'));
                
                // Enable default widget "Text" to recognize shortcodes
                add_filter('widget_text', 'do_shortcode');
                
                // Remove 'Portfolio Categories' from the title generated by wp_title()
                add_filter('wp_title', array(&$this, 'wp_title'));
                
                // Custom Nav Menu Args - container, menu_class, depth, walker...
                add_filter('iwak_nav_menu_args', array(&$this, 'iwak_nav_menu_args'));
            }
            
            // Since WP 2.9
            if ( WPVERSION >= 29 ) {
                add_theme_support( 'post-thumbnails' );
                //add_image_size( 'post-thumb', 640, 240, true );
                add_filter('user_contactmethods', array(&$this, 'user_contactmethods'),10,1);
                //add_filter('excerpt_length', array(&$this, 'new_excerpt_length'));
                //add_filter('excerpt_more', array(&$this, 'new_excerpt_more'));
            }
            
        }
        
        function iwak_nav_menu_args($args) {
            require_once(THEME_PATH. '/includes/class.navwalker.php');
            $walker = new iWaK_Nav_Menu();
            $args['walker'] = $walker;
            return $args;
        }
        
        function wp_title($title) {
            $title = preg_replace('/\s*(\|)?\s*Portfolio Categories/is','',$title);
            return $title;
        }
        
        function testimonial() {
            if(empty($this->o['testimonial_records']))
                return;
            ob_start();
        ?>
        <div class="testimonial-wrapper">
            <ul class="testimonial">
                <?php foreach($this->o['testimonial_records'] as $testimonial): $i++; ?>
                <li <?php if($i == 1) echo 'class="active"'; ?>>
                    <p class="content"><span class="avatar"><?php if($testimonial['author_image']) echo '<img src="'. THEME_URL. '/core/thumb.php?src='. $testimonial['author_image']. '&w=64&h=64&zc=1&q=90" />'; ?></span><?php echo $testimonial['content']; ?></p>
                    <p class="meta">
                        <span class="author"><?php echo $testimonial['author']; ?></span>
                        <?php if($testimonial['author_is']): ?><span class="author-is"><?php echo $testimonial['author_is']; ?></span><?php endif; ?>
                        <a href="<?php echo $testimonial['site_url']; ?>"><?php echo $testimonial['site_name']; ?></a>
                    </p>
                </li>
                <?php endforeach; ?>
            </ul>
            
            <div class="nav">
                <span class="prev"></span>
                <span class="next"></span>
            </div>
            <div class="clear"></div> <!-- for IE7 -->
        </div>
        <?php
            return ob_get_clean();
        }
        
        function contactform($email = '', $args = array()) {
            extract(wp_parse_args($args, array(
                'rows'=>5,
            )));
            
            ob_start();
        ?>
            <ul class="error"><?php if(isset($_POST['submit'])) $this->sendmail(); //If the form is submitted ?></ul>
                
            <?php if(isset($this->email_sent) && $this->email_sent == true): ?>
                <p class="thankyou">
                    <?php _e('Your Message Has Been Sent, thank you!', THEME_NAME); ?>
                </p>
            <?php else: ?>
                <form id="contactform" action="" method="post">
                    <div class="form-input">
                        <input id="cfname" name="cfname" class="text <?php if(isset($this->invalid_inputs['name'])) echo 'invalid';?>" type="text" value="<?php echo $this->invalid_inputs['name'];?>" size="30" maxlength="50" tabindex="1" />
                        <label class="form-label"><?php _e('Name', THEME_NAME); ?> *</label>
                    </div>

                    <div class="form-input">
                        <input id="cfemail" name="cfemail" class="text <?php if(isset($this->invalid_inputs['email'])) echo 'invalid';?>" type="text" value="<?php echo $this->invalid_inputs['email'];?>" size="30" maxlength="50" tabindex="2" />
                        <label class="form-label"><?php _e('EMail', THEME_NAME); ?> *</label>
                    </div>

                    <div class="form-textarea">
                        <textarea id="cfmessage" name="cfmessage" class="textarea <?php if(isset($this->invalid_inputs['message'])) echo 'invalid';?>" tabindex="3" rows="<?php echo $rows; ?>"><?php echo $this->invalid_inputs['message'];?></textarea>
                    </div>
                    
                    <p class="form-submit">
                        <input id="submit" name="submit" class="button" type="submit" value="<?php _e( 'Send E-Mail', THEME_NAME ) ?>" tabindex="4" />
                        <span class="loaderIcon hidden"></span>
                        <input type="hidden" value="<?php echo admin_url("admin-ajax.php"); ?>" name="submit_url" id="submit_url">
                    </p>
                </form>
            <?php endif; 
            return ob_get_clean();
        }
        
        function product_register() {

            $labels = array(
              'singular_name' => __('Portfolio', THEME_NAME),   // ‘singular_label’ will show up when one of that type is referenced (Add Product, for example).
              'add_new_item' => __('Add New Portfolio Post'),
              'edit_item' => __('Edit Portfolio Post'),
              // 'new_item' => __('New Product'),
              // 'view_item' => __('View Product'),
              // 'search_items' => __('Search Products'),
              // 'not_found' =>  __('No products found'),
              // 'not_found_in_trash' => __('No products found in Trash'), 
            );

            $args = array(  
                'label' => __('Portfolio'), // ‘label’ will show up in the admin nav and anywhere that references multiple entries of that type (Edit Products, for example).
                'labels' => $labels,  
                'public' => true,  
                'show_ui' => true,  
                'capability_type' => 'post',    // This tells WordPress which native type (post, page, attachment, revision, or nav-menu-item) the custom type will behave as. By making it a ‘post’ type, we can do things like add it to a category.
                'hierarchical' => false,  
                'show_in_nav_menus' => false,
                'rewrite' => array('slug'=>'portfolio'),   // Tell WordPress if (or how) to apply permalinks formatting. Or any array of arguments to apply a custom permalink format to the type.
                'supports' => array('title', 'editor', 'thumbnail', 'excerpt', 'revisions', 'trackbacks')  
            );
            register_post_type( 'portfolio' , $args ); 
            
            $args = array(  
                'label' => __('Portfolio Categories'), 
                'labels' => array('singular_name'=>'Category'),
                'hierarchical' => true,  
                'rewrite' => array('slug'=>'catalog'),   // Tell WordPress if (or how) to apply permalinks formatting. Or any array of arguments to apply a custom permalink format to the type.
                'query_var'=>'pcat'
            );
            register_taxonomy('portfolio_category', array("portfolio"), $args);  
        }          
        
        function add_verbose_portfolio_clients_page($rewrite_rules)
        {
            global $wp_rewrite;

            // We only generate them for this page
            $page_uri = 'portfolio/category';
            // Returns site root + '%pagename%'
            $page_structure = $wp_rewrite->get_category_permastruct();
            // Everywhere you see %pagename% in the structure used to generate rules
            // in the next step, replace it with our fixed page name
            $wp_rewrite->add_rewrite_tag('%category%', "({$page_uri})", 'category=');
            // This generates the group given above
            $page_rewrite_rules = $wp_rewrite->generate_rewrite_rules($page_structure, EP_PAGES);

            // Our rules have priority, they should be on top
            $rewrite_rules = array_merge($page_rewrite_rules, $rewrite_rules);

            return $rewrite_rules;
        }

        function social_links($args='') {
        
            extract(wp_parse_args($args, array(
                'before'=>'',
                'after'=>'',
                'username'=>'',
                'rss'=>0,
                'echo'=>1,
            )));
            
            $o = '';
            $user = empty($username) ? get_userdata(1) : get_userdatabylogin($username);
            if(!empty($user->twitter))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->twitter). '" title="Twitter"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/twitter.png" /></a>'. $after;
            if(!empty($user->facebook))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->facebook). '" title="Facebook"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/facebook.png" /></a>'. $after;
            if(!empty($user->delicious))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->delicious). '" title="Delicious"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/delicious.png" /></a>'. $after;
            if(!empty($user->linkedin))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->linkedin). '" title="Linkedin"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/linkedin.png" /></a>'. $after;
            if(!empty($user->youtube))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->youtube). '" title="youtube"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/youtube.png" /></a>'. $after;
            if(!empty($user->flickr))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->flickr). '" title="Flickr"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/flickr.png" /></a>'. $after;
            if(!empty($user->skype))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->skype). '" title="Skype"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/skype.png" /></a>'. $after;
            if(!empty($user->yahoo))
                $o .= $before. '<a class="social-link" href="'. esc_url($user->yahoo). '" title="Yahoo"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/yahoo.png" /></a>'. $after;
            
            if($rss) {
                $siterss = empty($this->o['general']['rss']) ? get_bloginfo('rss2_url') : $this->o['general']['rss'];
                $o .= $before. '<a class="social-link" href="'. esc_url($siterss). '" title="RSS"> <img class="social-icon" width="'. $width. '" height="'. $height. '" src="'. THEME_URL. '/images/social/rss.png" /></a>'. $after;
            }

            if($echo)
                echo $o;
            else
                return $o;
        }
        
        function user_contactmethods($contactmethods) {
            $contactmethods['twitter'] = 'Twitter';
            $contactmethods['facebook'] = 'Facebook';
            $contactmethods['youtube'] = 'Youtube';
            //$contactmethods['delicious'] = 'Delicious';
            $contactmethods['linkedin'] = 'Linkedin';
            //$contactmethods['flickr'] = 'Flickr';
            //$contactmethods['skype'] = 'Skype';
            //$contactmethods['yahoo'] = 'Yahoo';
            
            // Remove Yahoo IM
            unset($contactmethods['yim']);
            return $contactmethods;
        }
        
        function seo_head() {
            
            wp_reset_query();

            global $post;
                        
            if( $this->o['general']["homepage_desc"] != "" ) {
            
                if( is_front_page() )
                    $description = $this->o['general']["homepage_desc"];
                elseif( is_singular() )
                    $description = $post->post_excerpt ? $post->post_excerpt : i_substr(strip_tags($post->post_content), 0, 400);

                echo '<meta name="description" content="'. strip_tags($description). '" />';
            }
            
            if ($this->o['general']["homepage_keywords"] != "") {
            
                if( is_front_page() )
                    $keywords = $this->o['general']["homepage_keywords"];
                elseif( is_singular() ) {
                    $keywords = get_the_tag_list('', ', ', '');
                }
                    
                echo '<meta name="keywords" content="'. strip_tags($keywords). '" />';
            }
        }
        
        function wp_head() {
        
            $this->seo_head();
                        
            $include  .= '<link rel="stylesheet" type="text/css" href="'.THEME_URL.'/css/prettyPhoto.css" media="screen" />';
            $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/jquery.prettyPhoto.js"></script>';
            
            // $include  .= '<link rel="stylesheet" type="text/css" href="'.THEME_URL.'/css/superfish.css" media="screen" />';
            // $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/jquery.hoverIntent.minified.js"></script>';
            // $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/superfish.js"></script>';
            // $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/supersubs.js"></script>';
            
            if( isset($this->o['instant_position']) && in_array(1, $this->o['instant_position']) )
                $include .= '<script type="text/javascript" src="'.ADMIN_URL.'/js/jquery-ui-1.8.custom.min.js"></script>';
            
            $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/timers.js"></script>';
            //$include .= '<script type="text/javascript" src="'.THEME_URL.'/js/jquery.pause-resume-animation-0.2.js"></script>';
            //$include .= '<script type="text/javascript" src="'.THEME_URL.'/js/jquery.ba-resize.min.js"></script>';
            $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/jquery.tools.min.js"></script>';
            $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/jquery.easing.1.3.js"></script>';
            $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/filterable.js"></script>';
            $include .= '<script type="text/javascript" src="'.THEME_URL.'/js/general.js"></script>';
            
            //handle style request
            if( isset($_GET['style']) && in_array($_GET['style'], $this->o['general']['styles']) ) {
                $this->o['general']['style'] = $_GET['style'];
            }
            
            if( isset($_GET['pattern']) ) {
                $this->o['general']['pattern'] = $_GET['pattern'];
            }
            
            //handle special logo request
            if( isset($_GET['logo']) ) {
                $this->o['general']['logo'] = STYLESHEET_URL. '/styles/images/logo.png';
            }
            
            if( !empty($this->o['general']['style']) && $this->o['general']['style'] != 'default' )
                $include .= '<link rel="stylesheet" type="text/css" href="'.STYLESHEET_URL.'/styles/'. $this->o['general']['style']. '.css" />';
                        
            if( $this->o['general']['custom_css'] ) {
                $css .= "<style text='text/css'>\n";
                $css .= $this->o['general']['custom_css'];
                $css .= "</style>\n";
            }
            
            if( $this->o['background']['color'] ) {
                $css .= "<style text='text/css'>\n";
            
                $background_repeat = $this->o['background']['tile'] ? 'repeat' : 'no-repeat';
                if($this->o['background']['image']) {
                    $background_image =  $this->o['background']['image'];
                } elseif($this->o['general']['pattern'] != 'none') {
                    $background_image = THEME_URL. '/images/patterns/'. $this->o['general']['pattern']. '.png';
                    $background_repeat = 'repeat';
                }
                
                $css .= "    body {background: #". $this->o['background']['color']. " url($background_image) $background_repeat 0 0;}";

                $css .= "</style>\n";
            }
            
            if( $this->o['general']['color'] ) {
                $css .= "<style text='text/css'>\n";
            
                $main_color = $this->o['general']['color'];
                $css .= "a,
                    .login-meta a,
                    .iwak-widget-twitter .time,
                    .more-link,
                    .comment.bypostauthor .fn,
                    .comment-reply-link,
                    .comment-edit-link,
                    #main-nav ul a:hover { color: #$main_color; }

                    .button,
                    .pagination a:hover, 
                    .pagination a.current, 
                    .pagination span.current { background-color: #$main_color; }";

                $css .= "</style>\n";
            }
                
            echo $include . $css;
        }
        
        function init() {
            $this->sidebars_init();
            if( !is_admin() ) {
                wp_deregister_script('jquery');
                wp_register_script('jquery', 'http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js', false, '1.4.2');
                wp_enqueue_script('jquery', false, false, '1.4.2');                
                //wp_enqueue_script('jquery');                
            }
        }
        
        function reset_widget_number($args) {
            global $widget_num;
            $widget_num = 0;
            return $args;
        }
        
        function widget_number($args) {
            global $widget_num;
            $widget_num ++;
            $c = 'widget-'. $widget_num;
            $args[0]['before_widget'] = str_replace('widget-number', $c, $args[0]['before_widget']);
            return $args;
        }
        
        function sidebars_init() {
            if ( !function_exists('register_sidebars') )
                return;

            $p = array(
                'before_widget'  => '<div id="%1$s" class="widget %2$s widget-number">',
                'after_widget'   => '</div>',
                'before_title'   => '<h2 class="widget-title"><span class="widget-icon"></span>',
                'after_title'    => '</h2>'
            );

            register_sidebar( $p + array('name'=>'General Sidebar', 'description'=>__('Default sidebar', THEME_NAME)) );
            register_sidebar( $p + array('name'=>'Blog Sidebar', 'description'=>__('The separate sidebar for Blog', THEME_NAME)) );
            register_sidebar( $p + array('name'=>'Post Sidebar', 'description'=>__('The separate sidebar for general posts', THEME_NAME)) );
            register_sidebar( $p + array('name'=>'Page Sidebar', 'description'=>__('The separate sidebar for general pages', THEME_NAME)) );
            register_sidebar( $p + array('name'=>'Portfolio Post Sidebar', 'description'=>__('Widgets here will be displayed on every portfolio post page, right below post description.', THEME_NAME)) );
            register_sidebar( $p + array('name'=>'Home Page') );
            register_sidebar( $p + array('name'=>'Footer Column 1') );
            register_sidebar( $p + array('name'=>'Footer Column 2') );
            register_sidebar( $p + array('name'=>'Footer Column 3') );
            register_sidebar( $p + array('name'=>'Footer Column 4') );
        }
        
        function exclude_sticky_posts($args) {
            $args->query_vars = array_merge($args->query_vars, array('post__not_in'=>get_option('sticky_posts')));
            return $args;
        }
                
        function widgets_init() {
            //unregister_widget( 'WP_Widget_Search' );
            if(WPVERSION > 27) {
                register_widget('iwakWidgetAds');
                register_widget('iwakWidgetFlickr');
                register_widget('iwakWidgetTwitter');
                register_widget('iwakWidgetRP');
                register_widget('iwakWidgetRC');
                register_widget('iwakWidgetPost');
                register_widget('iwakWidgetPP');
            }
        }
        
        /* - List posts per $args */
        function list_posts($query, $args=array()) {
        
            $posts = is_object($query) ? $query->posts : $query;
            
            if( !$posts || !is_array($posts) )
                return;
                            
            global $post;
            extract(wp_parse_args($args, array(
                'itemtag'=>'div',
                'num_of_posts'=>3,
                'show_thumbnail'=>1,
                'show_title'=>1,
                'show_meta'=>0,
                'show_morelink'=>0,
                'show_excerpt'=>1,
                'excerpt_length'=>160,
                'thumbnail_size'=>'large',
                'photo_size'=>'middle',
                'group_size'=>3,
                'thumbnail_link'=>'post',
                'class'=>'',
                'filter'=>'standard',
                'lightbox'=>'prettyPhoto',
                'more_text'=> __('More', THEMENAME),
            )));
            
            //if(!isset($show_content)) $show_content = 0;
            //if(!isset($content_length)) $content_length = 100;
            
            if( $show_thumbnail && !$show_title && !$show_content )
                $class .= ' thumb-entry';
            elseif( !$show_thumbnail && $show_title && !$show_content )
                $class .= ' title-entry';

            $gallery_id = rand(1, 9999);
            //if($thumbnail_link == 'post')
            $i = $group = 0;
            
            foreach($posts as $post): setup_postdata($post);
                if($i == $num_of_posts) break;
                
                $post_image_url = $this->get_post_image_url();
                $lightbox_open_url = $post_image_url;
                
                $lightbox_media = get_post_meta(get_the_ID(), 'video_link', true);
                $lightbox_media_is_video = get_post_meta(get_the_ID(), 'is_video', true);
                if($lightbox_media_is_video == '') $lightbox_media_is_video = 1;
                
                $post_thumb = $post_image_url ? $this->get_the_thumbnail($post_image_url, $thumbnail_size) : '';
                $addition = ($i % 2 == 0) ? ' even' : ' odd';
                $addition .= ' '. $post->post_type. '-entry';
                if(!empty($lightbox_media)) {
                    $lightbox_open_url = $lightbox_media;
                    if($lightbox_media_is_video) {
                        $addition .= ' video-entry';
                    }
                }
                
                if($group_size > 1) {
                    $addition .= ' group-'. $group;
                    
                    if( $i % $group_size == 0 ) {
                        $rank = ' first';
                    } else if($i % $group_size == $group_size - 1) {
                        $group ++;
                        $rank = ' last';
                    } else {
                        $rank =  '';
                    }
                }
                    //wp_get_post_terms( $post_id, $taxonomy, $args )
                if( $terms = get_the_terms($post->ID, 'portfolio_category') )
                    foreach((array)$terms as $term) {
                        //showinfo($term->slug);
                        //showinfo(get_term($term->term_id, 'portfolio_category')->slug);
                        $addition .= ' '. $term->slug;
                    }
                    
                $i ++;

                $o = "<$itemtag class='$class $addition $rank'>";
                
                if($show_thumbnail && $post_thumb) {
                    $attr = $lightbox ? 'href="'. $lightbox_open_url. '" rel="'. $lightbox. '['. $gallery_id. ']"' : 'href="'. get_permalink(). '"';
                    $o .= '<div class="entry-thumb '. $filter. '"><a class="thumblink" '. $attr. '>'. $post_thumb. '<span class="extra"></span></a></div>';
                }
                    
                if($show_title) {
                
                    $terms = get_the_terms ($post->id, 'portfolio_category');
                                            
                    if (!empty($terms)) {
                        unset($categories);
                        foreach ($terms as $term) {
                            $categories[] = $term->name;
                        }

                        $categories = join(", ", $categories);
                    }
    
                    $href = get_permalink();
                    $title = __('Permanent Link to %s', THEME_NAME). the_title_attribute('echo=0');
                    $text = get_the_title();
                    //$text = i_substr(get_the_title(), 0, 38);
                    $o .= "<div class='entry-title'><span>$categories</span><a href='$href' title='$title' rel='bookmark'>$text</a></div>";
                }
                
                if($show_meta) {
                    $href = get_month_link($get_year, $get_month);
                    $text = get_the_time('M j, Y');
                    $o .= "<div class='entry-meta'><a href='$href'>$text</a></div>";
                }
                
                if($show_excerpt) {
                    $excerpt_length = intval($excerpt_length);
                    $excerpt = get_the_excerpt();
                    $total_length = strlen($excerpt);
                    $c = ($excerpt_length > 1 && $except_length < $total_length) ? i_substr($excerpt, 0, $excerpt_length, '...') : str_replace('[...]', '...', $excerpt);
                }

                if($show_morelink) {
                    $more = '<a class="more-link" href="'. get_permalink(). '">'. $more_text. '</a>';
                }
                
                $o .= empty($c) ? $more : "<p class='entry-content'>$c$more</p>";

                $o .= "</$itemtag>";
                
                echo $o;
                
            endforeach;
        }
        
        function get_first_category($besides = '') {
            $cats = get_the_category();
            foreach($cats as $cat)
                if( !in_array($cat->cat_name, (array)$besides) )
                    return $cat->cat_name;
        }
        
        function the_category($separator = ', ') {
            $c = get_the_category_list('&#iwak#&');
            
            //remove category 'featured'
            $c = preg_replace('/\s*<a[^<>]+>\s*'. __('featured', THEME_NAME). '\s*<\/a>(&#iwak#&)?/is', '', $c);
            $c = preg_replace(array('/^&#iwak#&/i', '/&#iwak#&$/i'), '', $c);
            $c = empty($c) ? 'Uncategorized' : preg_replace('/&#iwak#&/i', $separator, $c);
            echo $c;
            //echo preg_replace("/>\s*([^<>]+)\s*</se", "strtoupper('\\0')", $c);
        }
        
        /* @Get hierarchical parent links of the post, separate each link with $separator
            @Awareness: better not to use any regular special charactor in $separator,
                it will result in 'featured' category remains, which is desired to be removed
         */
        function the_path($separator = ' &gt; ', $before='', $after='') {
        
                global $post;
                
                if($post->post_type == 'attachment') {
                    $parent = & get_post($post->post_parent);
                    $path = get_the_category_list($separator, 'multiple', $post->post_parent). $separator. $this->get_the_post_link($post->post_parent);
                } else
                    $path = get_the_category_list($separator);
                
                if($path)
                    $path = $separator. $path;
                // remove category 'featured', not neccessary
                //$path = preg_replace('/\s*<a[^<>]+>\s*'. __('featured', THEME_NAME). '\s*<\/a>('. $separator. ')?/is', '', $path);
                //$path = preg_replace('/'. $separator. '\s*'. $separator. '/is', $separator, $path);
                
                echo $before. '<a href="'. HOME_URL. '">'. __('Home', THEME_NAME). '</a>'. $path. $separator. $post->post_title. $after;
        }
        
        function the_meta() {
            if(is_single())
                $display = $this->o['postmeta_single'];
            elseif(is_archive())
                $display = $this->o['postmeta_archive'];
            else
                $display = 1;
                
            if($display) {
                edit_post_link( __( 'Edit', THEME_NAME ), '', '' );
                echo '<span class="post-info-text">'. __('By ', THEME_NAME). get_the_author(). __(' on ', THEME_NAME). get_the_time('F j, Y'). '</span>';
                comments_popup_link( __('Add Comments', THEME_NAME), __('1 Comment', THEME_NAME), __('% Comments', THEME_NAME), 'post-comm-link', __('Comments Off', THEME_NAME));
            }
        }
        
        function the_tags($before='<div class="post-tag">', $after='</div>') {
            $display = $this->o['general']['display_tags'];
            if($display)
                the_tags( $before. __( 'Tags: ', THEME_NAME ), ', ', $after);
        }
                
        function get_post_excerpt($args) {
            extract($args);
            return $this->trim_excerpt($length, $more, $striptags, $content);
        }
        
        function trim_excerpt($length = 200, $more = false, $striptags = true, $content = '') {

            if( empty($content) )
                $content = $GLOBALS['post']->post_content;
                
            if($striptags)
                $content = strip_tags($content);
                
            $content = truncate( strip_shortcodes($content), $length );
            $append = $more ? '<a href='. get_permalink(). ' title='. get_the_title(). '>'. __('Read More', THEME_NAME). '</a>' : '';
            return apply_filters('the_excerpt', $content). $append;
        }
        
        // Since WP2.9
        function new_excerpt_length($length) {
            return $this->o['general']['excerpt_length'];
        }
        
        // Since WP2.9
        function new_excerpt_more($more_text) {
            return $this->get_the_post_link($more_text);
        }

        function remove_excerpt_more($excerpt) {
            return str_replace('[...]', '...', $excerpt);
        }

        function the_excerpt($length) {
            global $post;
            
            if(!empty($post->post_excerpt))
                $excerpt = truncate( $post->post_excerpt, $length );
            else
                $excerpt = truncate( strip_tags($post->post_content), $length );
                
            echo apply_filters('the_excerpt', $excerpt);
        }
        
        function previous_image_link() {
            echo $this->adjacent_image_link(true, '', 1);
        }
        
        function next_image_link() {
            echo $this->adjacent_image_link(false, '', 1);
        }
        
        /* Generate the link to image adjacent to the current, previous or next */
        function adjacent_image_link($prev=true, $text=false, $has_icon=0) {
        
            if($text === false)
                $text = $prev ? __('Previous', THEME_NAME) : __('Next', THEME_NAME);
            elseif(empty($text))
                $icon = '<span class="icon"></span>';
                
            $class = $prev ? 'prev' : 'next';
            $image_url = $this->adjacent_image_url($prev);
            if( empty($image_url) )
                return;
                
            $image_link = '<a class="'. $class. '" href="'. $image_url. '">'. $icon. $text. '</a>';
                
            return $image_link;
        }
        
        function adjacent_image_url($prev = true) {
            global $post;
            $post = get_post($post);
            $attachments = array_values(get_children( array('post_parent' => $post->post_parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => 'ASC', 'orderby' => 'menu_order ID') ));

            foreach ( $attachments as $k => $attachment )
                if ( $attachment->ID == $post->ID )
                    break;

            $k = $prev ? $k - 1 : $k + 1;

            if ( isset($attachments[$k]) )
                return get_permalink($attachments[$k]->ID);
        }
        
        function list_images($post_id) {
        
            if( !$imgs = wp_cache_get(THEMENAME. $post_id . '_images', THEMENAME) ) {
            
                $imgs = '';
                
                $args = array(
                    'post_type' => 'attachment',
                    'numberposts' => -1,
                    'post_status' => null,
                    'post_parent' => $post_id
                );
                
                $attachments = get_posts($args);
                
                if ($attachments) {
                    foreach ($attachments as $attachment) {
                        $img = wp_get_attachment_image($attachment->ID, array(100,100));
                        if( $img ) $imgs .= '<a href="'.get_permalink($attachment->ID).'">'. $img.'</a>';
                    }
                }
                wp_cache_add(THEMENAME. $post_id . '_images', $imgs, THEMENAME);
            }
            
            echo $imgs;
        }
        
        function meta_links() {
            ?>
                <a id="comments-link" href="<?php echo get_permalink(). '#comments' ?>" title="<?php printf( __('Permanent Link to %s', THEME_NAME), the_title_attribute('echo=0') ) ?>" rel="bookmark"></a>
            <?php
                $this->the_author_posts_link();
        }
        
        
        function the_author_posts_link($deprecated = '') {
            global $authordata;
            printf(
                '<a id="author-posts-link" href="%1$s" title="%2$s"></a>',
                get_author_posts_url( $authordata->ID, $authordata->user_nicename ),
                sprintf( __( 'Posts by %s' ), esc_attr( get_the_author() ) )
            );
        }
                
        function list_similar_posts() {
            $cat_ids = array();
            $cat_names = array();
            foreach( get_the_category() as $category ) {
                if( $category->cat_name != __('featured', THEME_NAME) ) {
                    $cat_ids[] = $category->cat_ID;
                    $cat_names[] = $category->cat_name;
                }
            }
            
            if( !empty($cat_ids) ) {
                $q = new WP_QUERY( array('showposts'=>5, 'category__in'=>$cat_ids, 'post__not_in'=>$this->featured_ids) );
                if( $q->have_posts() ):
                    echo '<h3>'. __('Other posts in ', THEME_NAME). implode(', ', $cat_names). '</h3><ul>';
                    while( $q->have_posts() ): $q->the_post();
                    ?>
                        <li><a href="<?php the_permalink() ?>" title="<?php printf( __('Permanent Link to %s', THEME_NAME), the_title_attribute('echo=0') ) ?>" rel="bookmark"><?php echo i_substr(get_the_title(), 0, 45); ?></a></li>
                    <?php
                    endwhile;
                    echo '</ul>';
                endif;
                
                wp_reset_query();
            }
        }
        
        function about_the_author() {
        
            $author_desc = __('This feature needs wordpress 2.8+ installed, you are using an old wordpress version.', THEME_NAME);
                
            if( function_exists('get_the_author_meta') ) {
                $author_email = get_the_author_meta('user_email');
                $author_desc = get_the_author_meta('user_description');
                $author_avatar = get_avatar($author_email, 64);
            }
            
            $o = $author_avatar. '<h3>'. __('About ', THEME_NAME). get_the_author(). '</h3>';
            $o .= wpautop($author_desc);
            return $o;
        }
        
        function meta_headline() {
            if($this->o['corner_info'] == 'author')
                echo $this->about_the_author();
            elseif($this->o['corner_info'] == 'custom')
                echo '<img class="avatar" src='. $this->o['info_image']. ' alt="about us" />'. '<h3>'. $this->o['info_title']. '</h3>'. wpautop($this->o['info_content']);
        }
        
        function list_aggregators() {
        
            if(!$this->o['show_subscirbelink'])
                return;
                
            ?>
            <ul>  
                <li><a href="http://<?php echo preg_replace('/^\s*https?:\/\//i', '', $this->o['feed_addr']); ?>"><img src="<?php echo THEME_URL. '/images/feed.png'; ?>" /><small><?php echo $this->o['feed_title']; ?></small>
                <!--[if gte IE 7]><!--></a><!--<![endif]-->  

                    <?php if($this->o['list_aggregators']): ?>
                        <!--[if lte IE 6]><table><tr><td><![endif]-->  
                        <ul>
                            <?php $aggregators = $this->aggregator_lists[get_bloginfo('language')];
                                if( empty($aggregators) ) $aggregators = $this->aggregator_lists['en-US'];
                                $aggregators = array_merge($this->aggregator_lists['global'], $aggregators);
                                foreach( $aggregators as $aggr_name => $aggr_url )
                                    printf( '<li><a href="%s">%s</a></li>', $aggr_url. $this->o['feed_addr'], 'Add to '.$aggr_name );
                            ?>
                        </ul>
                        <!--[if lte IE 6]></td></tr></table></a><![endif]-->  
                    <?php endif; ?>
                    
                </li>  
            </ul>  
            <?php
        }
        
        /* Fetch first image & gallery images (if have) from the post
            Awareness - this function must be used in the_post() Loop
            Return - an array with images' urls */
        function get_images($thumbnail_size, $photo_size = 'small', $class='thumb-right', $post_id = NULL) {
        
            if( !empty($post_id) )
                $post = & get_post($post_id);
            else
                $post = $GLOBALS['post'];

            if( !is_array($thumbnail_size) ) {
                if(preg_match('/^\d+x\d+$/i', $thumbnail_size))
                    $class .= ' icon icon-';
                else
                    
                $class .= ' thumbnail thumb-'. $thumbnail_size;
            } else {
                $class .= ' thumbnail';
            }
                
            $i = array();
            $c = $post->post_content;
            $start = strpos($c, '<img');
            
            // Get Thumbnail
            if( function_exists('has_post_thumbnail') && has_post_thumbnail($post->ID) ) {
                // Retrieve the post thumbnail
                    $img = wp_get_attachment_image_src(get_post_thumbnail_id($post->ID), 'full');
                    $i[] = '<a class="imagelink" title="'. get_the_title($post->ID). '" href="'. get_permalink($post->ID). '"><img class="'. $class. '" src="'. $this->get_thumbnail_url($img[0], $thumbnail_size).  '" ></a>';
            } else {
                // Auto generate thumbnail by the first image in the post
                if( $c && $start !== false ) {
                    $start = strpos( $c, 'src', $start );
                    $start = strpos( $c, "\"", $start ) + 1;
                    $end = strpos( $c, "\"", $start );
                    $i[] = '<a class="imagelink" title="'. get_the_title($post->ID). '" href="'. get_permalink($post->ID). '"><img class="'. $class. '" src="'. $this->get_thumbnail_url(substr($c, $start, $end - $start ), $thumbnail_size).  '" ></a>';
                }
            }
            
            // Get Gallery Images
            if( strpos( $c, '[gallery' ) !== false ) {
            
                $args = array(
                    'post_type' => 'attachment',
                    'numberposts' => -1,
                    'post_status' => 'any',
                    'post_parent' => $post->ID,
                    'post_mime_type' => 'image',
                    'nopaging' => true,
                    'orderby' => 'menu_order',
                );
                
                $attachments = & get_children($args);
                if ( !empty($attachments) ) {
                    foreach ($attachments as $attachment) {
                        $img = wp_get_attachment_image_src($attachment->ID, 'full');
                        if( !empty($i) )
                            $i[] = '<a class="imagelink" href="'.get_permalink($attachment->ID).'"><img class="attachment '. $class. '" src="'. $this->get_thumbnail_url($img[0], $photo_size).  '" ></a>';
                        else
                            $i[] = '<a class="imagelink" href="'.get_permalink($attachment->ID). '"><img class="attachment '. $class. '" src="'. $this->get_thumbnail_url($img[0], $thumbnail_size).  '" ></a>';
                    }
                }
            }
            
            return $i;
        }
        
        function comment_avatar($avatar_size = 40) {
            $avatar_email = get_comment_author_email();
            $avatar = get_avatar( $avatar_email, $avatar_size );
            echo $avatar;
        }
        
        function get_comment_index() {
            global $comment_ids;
            if ( $comment_index = $comment_ids[get_comment_id()] )
                $comment_index = $comment_index;
            return $comment_index;
        }
        
        function comment_index() {
            echo $this->get_comment_index();
        }
        
        // Produces threaded/nested comments structure, requires wordpress 2.7&higher
        function list_comments($comment, $args, $depth) {
           $GLOBALS['comment'] = $comment; ?>
           <li id="comment-<?php comment_ID() ?>" <?php comment_class('comment-entry'); ?>>
               <div id="div-comment-<?php comment_ID() ?>" class="comment-body">
                    <?php $add_below = 'div-comment'; ?>
                    
                    <div class="comment-index"><?php if($index = $this->get_comment_index()) echo str_pad($index, 2, '0', STR_PAD_LEFT); ?></div>
                    
                    <div class="comment-content">
                        <?php $this->comment_avatar($args['avatar_size']); ?>
                    
                        <div class="comment-meta commentmetadata">
                            <span class="date"><?php comment_date('M d, Y') ?> </span>
                            <span class="time"><?php comment_time() ?> </span>
                        </div>
                        
                        <div class="comment-author vcard">
                            <span class="fn"><?php comment_author_link();?></span>
                            <?php comment_reply_link(array_merge( $args, array('add_below' => $add_below, 'reply_text' => __('Reply', THEME_NAME), 'depth' => $depth, 'max_depth' => $args['max_depth']))) ?>
                        </div>
                        
                        <?php comment_text(); ?>
                    </div>
                    
                    <div class="clear"></div>
              </div>
        <?php
        }


        function end_list_comments() {
                echo '</li>';
        }
        
        function gallery_shortcode($output, $attr) {
            global $post;

            // We're trusting author input, so let's at least make sure it looks like a valid orderby statement
            if ( isset( $attr['orderby'] ) ) {
                $attr['orderby'] = sanitize_sql_orderby( $attr['orderby'] );
                if ( !$attr['orderby'] )
                    unset( $attr['orderby'] );
            }
            
            extract(shortcode_atts(array(
                'order'      => 'ASC',
                'orderby'    => 'menu_order ID',
                'id'         => $post->ID,
                'itemtag'    => 'div',
                'icontag'    => '',
                'captiontag' => 'span',
                'columns'    => 3,
                'size'       => array(187, 187),
                'include'    => '',
                'exclude'    => '',
                'lightbox'  =>  'prettyPhoto'
            ), $attr));

            // extract(array(
                // 'order'      => 'ASC',
                // 'orderby'    => 'menu_order ID',
                // 'id'         => $post->ID,
                // 'itemtag'    => 'div',
                // 'icontag'    => '',
                // 'captiontag' => 'span',
                // 'columns'    => 7,
                // 'size'       => array(187, 187)
            // ));

            $parent = intval($id);
            $attachments = get_children( array('post_parent' => $parent, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'order' => $order, 'orderby' => $orderby) );

            if ( empty($attachments) )
                return '';

            if ( is_feed() ) {
                $output = "\n";
                foreach ( $attachments as $id => $attachment )
                $output .= wp_get_attachment_link($id, $size, true) . "\n";
            return $output;
            }

            $itemtag = tag_escape($itemtag);
            $captiontag = tag_escape($captiontag);
            $columns = intval($columns);
            $itemwidth = $columns > 0 ? floor(100/$columns) : 100;
            $rel = strtolower($lightbox) == 'off' ? "" : "rel='". $lightbox. "[$parent]'";
               
            $output = apply_filters('gallery_style', "
                <!-- see gallery_shortcode() in wp-includes/media.php -->
                <div class='gallery'>");

            $i = 0;
            foreach ( $attachments as $id => $attachment ) {
                $i ++;
                $pos = $i % $columns == 0 ? 'last' : '';
                $link = wp_get_attachment_link($id, $size, false, false);
                $image = wp_get_attachment_image_src($id, 'full');
                $src = $image[0];

                $output .= "<{$itemtag} class='gallery-item c$columns $pos'>";
                $output .= "<a href='$src' $rel><img src='". $this->get_thumbnail_url($src, $size).  "' ></a>";
                if ( $captiontag && trim($attachment->post_excerpt) )
                    $output .= "
                        <{$captiontag} class='btn_view'>
                        " . $attachment->post_excerpt. "
                        </{$captiontag}>";
                $output .= "</{$itemtag}>";
            }

            $output .= "
                    <br style='clear: both;' />
                </div>\n";

            return $output;
        }
        
        function sendmail() {

            $to = empty($this->o['contact']['email_address']) ? get_userdata(1)->user_email : $this->o['contact']['email_address'];
           
            $name = trim($_POST['cfname']);
            $email = $_POST['cfemail'];
            //$website = $_POST['cfwebsite'];
            //$phone = $_POST['cfphone'];
            $message = $_POST['cfmessage'];

            $body = empty($this->o['contact']['email_template']) ? '%message%' : $this->o['contact']['email_template'];
            $body = str_replace(	array('%name%', '%email%', '%message%', '%agent%'),
                                            array($name, $email, $message, get_bloginfo('name')), $body
                                        );
                
            $subject = empty($this->o['contact']['email_subject']) ? 'Message from %name%' : $this->o['contact']['email_subject'];
            $subject = str_replace(	array('%name%', '%email%', '%message%', '%agent%'),
                                            array($name, $email, $message, get_bloginfo('name')), $subject
                                        );
            $body = nl2br($body);
            
            //$admin = get_userdata(1);
            //$to = $admin->user_email; // Replace this with your own email address
            //$site_owners_name = $admin->display_name; // replace with your name
            
            if (strlen($name) < 2) {
                $error .= '1';
                $this->invalid_inputs['name'] = $name;                
            } else
                $error .= '0';
            
            if (!preg_match('/^[a-z0-9&\'\.\-_\+]+@[a-z0-9\-]+\.([a-z0-9\-]+\.)*+[a-z]{2}/is', $email)) {
                $error .= '1';
                $this->invalid_inputs['email'] = $email;                
            } else
                $error .= '0';
            
            if (strlen($message) < 3) {
                $error .= '1';
                $this->invalid_inputs['message'] = $message;                
            } else
                $error .= '0';
            
            if ($error == '000') {
                require_once(dirname(__FILE__).'/class.phpmailer.php');
                $mail = new PHPMailer();

                //$mail->SetFrom($email, $name);
                $mail->From = $email;
                $mail->FromName = $name;
                $mail->Subject = $subject;
                $mail->AddAddress($to);
                //$mail->Body = $body;
                $mail->MsgHTML($body);
                $mail->AltBody    = "To view the message, please use an HTML compatible email viewer!";
                
                /*/GMAIL STUFF
                $mail->IsSMTP(); // enable SMTP
                $mail->SMTPDebug = 1;  // debugging: 1 = errors and messages, 2 = messages only
                $mail->SMTPAuth = true;  // authentication enabled
                $mail->Host = 'ssl://smtp.gmail.com:465';
                //$mail->Port = 587;
                $mail->Username = "username"; // SMTP username
                $mail->Password = "password"; // SMTP password
                */
                
                // $mail->ErrorInfo will be printed if anything is wrong
                if($mail->Send())
                    $this->email_sent = true;
                        
            } # end if no error
            else {
                echo $error;
            } # end if there was an error sending

        }
        
        function load_widgets_group($name, $before='', $after='') {
            ob_start();
            dynamic_sidebar($name);
            $sidebar = ob_get_clean();
            if($sidebar)
                echo $before. $sidebar. $after;
        }
        
        function the_button($button) {
            if(!$button['text'])
                return;
            
            // target="_blank"
            $html = '<a class="fancybtn fancybtn_'. $button['style']. '" href="'. $button['link']. '"><span class="icon"></span><span class="btntxt">'. $button['text']. '<span>'. $button['desc']. '</span></span></a>';
                                        
            echo $html;
        }

        function the_tweet_link() {
            $url = sprintf('%s?p=%s', HOME_URL.'/', $id);
            
            $output_url = sprintf(
              'http://twitter.com/home?status=%s%s%s',
              urlencode(get_the_title()),
              urlencode(' - '),
              $url
            );
            $output_url = str_replace('+','%20',$output_url);
            return $output_url;
        }

        function sociable_bookmarks() {
            global $wp_query, $post;
            
            $sociable_sites = array (

                array( "name" => "Twitter",
                    'icon' => 'twitter.png',
                    'class' => 'icon_twitter first',
                    'url' => $this->the_tweet_link(),
                ),
                
                array( "name" => "Facebook",
                    'icon' => 'facebook.png',
                    'class' => 'icon_facebook',
                    'url' => 'http://www.facebook.com/share.php?u=PERMALINK&amp;t=TITLE',
                ),

                array( "name" => "del.icio.us",
                    'icon' => 'delicious.png',
                    'class' => 'icon_delicious',
                    'url' => 'http://delicious.com/post?url=PERMALINK&amp;title=TITLE&amp;notes=EXCERPT',
                ),

                array( "name" => "Digg",
                    'icon' => 'digg.png',
                    'class' => 'icon_digg',
                    'url' => 'http://digg.com/submit?phase=2&amp;url=PERMALINK&amp;title=TITLE&amp;bodytext=EXCERPT',
                ),

                array( "name" => "StumbleUpon",
                    'icon' => 'stumbleupon.png',
                    'class' => 'icon_stumbleupon',
                    'url' => 'http://www.stumbleupon.com/submit?url=PERMALINK&amp;title=TITLE',
                ),

                array( "name" => "Technorati",
                    'icon' => 'technorati.png',
                    'class' => 'icon_technorati',
                    'url' => 'http://technorati.com/faves?add=PERMALINK',
                ),

                array( "name" => "Mixx",
                    'icon' => 'mixx.png',
                    'class' => 'icon_mixx',
                    'url' => 'http://www.mixx.com/submit?page_url=PERMALINK&amp;title=TITLE',
                ),

                /*array( "name" => "Designfloat",
                    'icon' => 'designfloat.png',
                    'class' => 'icon_designfloat',
                    'url' => 'http://www.designfloat.com/submit.php?url=PERMALINK&amp;title=TITLE',
                ),*/

                array( "name" => "Linkedin",
                    'icon' => 'linkedin.png',
                    'class' => 'icon_linkedin',
                    'url' => 'http://www.linkedin.com/shareArticle?url=PERMALINK&amp;title=TITLE',
                ),

            );
            
            // Load the post's and blog's data
            $blogname = urlencode(get_bloginfo('name')." ".get_bloginfo('description'));
            $post = $wp_query->post;
            
            
            // Grab the excerpt, if there is no excerpt, create one
            $excerpt = urlencode(strip_tags(strip_shortcodes($post->post_excerpt)));
            if ($excerpt == "") {
                $excerpt = urlencode(substr(strip_tags(strip_shortcodes($post->post_content)),0,250));
            }
            
            // Clean the excerpt for use with links
            $excerpt = str_replace('+','%20',$excerpt);
            $excerpt = str_replace('%0D%0A','',$excerpt);
            $permalink 	= urlencode(get_permalink($post->ID));
            $title = str_replace('+','%20',urlencode($post->post_title));
            
            foreach($sociable_sites as $bookmark) {	
                $url = $bookmark['url'];
                $url = str_replace('TITLE', $title, $url);
                $url = str_replace('BLOGNAME', $blogname, $url);
                $url = str_replace('EXCERPT', $excerpt, $url);
                $url = str_replace('PERMALINK', $permalink, $url);
                
                $output .= '<a class="social-link" title="' .$bookmark['name']. '" href="' .$url. '">';
                $output .= '<img class="social-icon ' .$bookmark['class']. '" src="'. THEME_URL. '/images/social/'. $bookmark['icon']. '" />';
                $output .= '</a>';
            }

            return $output;
        }
        
        function related_posts() {
            global $post, $wpdb;
            $tags = wp_get_post_tags($post->ID);
            $tagIDs = array();
            if ($tags) {
                $tagcount = count($tags);
                for ($i = 0; $i < $tagcount; $i++) {
                    $tagIDs[$i] = $tags[$i]->term_id;
                }
                
                $args=array(
                    'tag__in' => $tagIDs,
                    'post__not_in' => array($post->ID),
                    'showposts'=>3,
                    'caller_get_posts'=>1
                );
                
                $my_query = new WP_Query($args);
                if( !$my_query->have_posts() ) { 
                    //show recent posts if no related found
                    $my_query = new WP_Query('numberposts=3&offset=0');
                }
            }
            
            $args = array(
                'thumbnail_size' => array(75, 45),
                'show_excerpt' => 0,
                'show_meta' => 1,
                'lightbox' => ''
            );
            $this->list_posts($my_query, $args);
            wp_reset_query();
        }

        function popular_posts() {
            global $post, $wpdb;
            $pop_posts = 3;
            $now = gmdate("Y-m-d H:i:s",time());
            $lastmonth = gmdate("Y-m-d H:i:s",gmmktime(date("H"), date("i"), date("s"), date("m")-12,date("d"),date("Y")));
            $popularposts = "SELECT ID, post_title, post_date, guid, post_name, COUNT($wpdb->comments.comment_post_ID) AS 'stammy' FROM $wpdb->posts, $wpdb->comments WHERE comment_approved = '1' AND $wpdb->posts.ID=$wpdb->comments.comment_post_ID AND post_status = 'publish' AND post_date < '$now' AND post_date > '$lastmonth' AND comment_status = 'open' GROUP BY $wpdb->comments.comment_post_ID ORDER BY stammy DESC LIMIT ".$pop_posts;
            $posts = $wpdb->get_results($popularposts);
            if($posts){ 
                $args = array(
                    'thumbnail_size' => array(75, 45),
                    'show_excerpt' => 0,
                    'show_meta' => 1,
                    'lightbox' => ''
                );
               $this->list_posts($posts, $args);
            }		
            wp_reset_query();
        }

    }
}

global $iwak;
$iwak = new iWaK();

?>